<%if(labels.includes('target')) {%>
'node'
<%} else if(labels.includes('module-rules')) {%>
{
    exclude: /node_modules/,
    test: /\.js$/,
    loader: 'babel-loader'
}
<%} else if(labels.includes('imports')) {%>
//const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const fs = require('fs');
const path = require('path');
const webpack = require('webpack');
const chalk = require('chalk');
<%} else if(labels.includes('plugins')) {%>
new webpack.DefinePlugin({
    'process.env': {
        NODE_ENV: JSON.stringify(isProd ? 'production' : 'development')
    }
})
<%} else if(labels.includes('entry')) {%>
{
    app: './src/js/index.js'
}
<%} else if(labels.includes('output')) {%>
{
    filename: `[name]${isDist}.js`,
    path: distPath,
    pathinfo: !isProd,
    libraryTarget: 'var'
}
<%} else if(labels.includes('devtool')) {%>
'inline-source-map'
<%} else if(labels.includes('resolve-extensions')) {%>
'.js'
<%} else if(labels.includes('resolve-modules')) {%>
'node_modules',
'src'
<%} else if(labels.includes('resolve')) {%>
{
    extensions: [
        <%=extension('webpack-config.*', 'resolve-extensions').filter(v => v.trim() != '').join('\n,')%>
    ],
    modules: [
        <%=extension('webpack-config.*', 'resolve-modules').filter(v => v.trim() != '').join('\n,')%>
    ]
}
<%} else if(labels.includes('optimization')) {%>
//    minimizer: [new UglifyJsPlugin()],
<%}%>